/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.tax_projects.cmtaxprojects.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.tax_projects.cmtaxprojects.service.CmtaxprojectsQueryExecutorService;
import com.tax_projects.cmtaxprojects.models.query.*;

@RestController(value = "Cmtaxprojects.QueryExecutionController")
@RequestMapping("/cmtaxprojects/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private CmtaxprojectsQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/projectList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of projects")
    public Page<ProjectListResponse> executeProjectList(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: projectList");
        Page<ProjectListResponse> _result = queryService.executeProjectList(pageable);
        LOGGER.debug("got the result for named query: projectList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query projectList")
    @RequestMapping(value = "/queries/projectList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportProjectList(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: projectList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "projectList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportProjectList( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/usersList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of Users")
    public Page<UsersListResponse> executeUsersList(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: usersList");
        Page<UsersListResponse> _result = queryService.executeUsersList(pageable);
        LOGGER.debug("got the result for named query: usersList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query usersList")
    @RequestMapping(value = "/queries/usersList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportUsersList(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: usersList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "usersList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportUsersList( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/preparersList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "list of preparers")
    public Page<PreparersListResponse> executePreparersList(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: preparersList");
        Page<PreparersListResponse> _result = queryService.executePreparersList(pageable);
        LOGGER.debug("got the result for named query: preparersList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query preparersList")
    @RequestMapping(value = "/queries/preparersList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPreparersList(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: preparersList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "preparersList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportPreparersList( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/rolesList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of roles")
    public Page<RolesListResponse> executeRolesList(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: rolesList");
        Page<RolesListResponse> _result = queryService.executeRolesList(pageable);
        LOGGER.debug("got the result for named query: rolesList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query rolesList")
    @RequestMapping(value = "/queries/rolesList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRolesList(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: rolesList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "rolesList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportRolesList( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/statusList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of statuses")
    public Page<StatusListResponse> executeStatusList(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: statusList");
        Page<StatusListResponse> _result = queryService.executeStatusList(pageable);
        LOGGER.debug("got the result for named query: statusList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query statusList")
    @RequestMapping(value = "/queries/statusList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportStatusList(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: statusList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "statusList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportStatusList( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/test", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "test")
    public Page<TestResponse> executeTest(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: test");
        Page<TestResponse> _result = queryService.executeTest(pageable);
        LOGGER.debug("got the result for named query: test, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query test")
    @RequestMapping(value = "/queries/test/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTest(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: test");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "test";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportTest( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/dispatcherList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of dispatchers")
    public Page<DispatcherListResponse> executeDispatcherList(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: dispatcherList");
        Page<DispatcherListResponse> _result = queryService.executeDispatcherList(pageable);
        LOGGER.debug("got the result for named query: dispatcherList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query dispatcherList")
    @RequestMapping(value = "/queries/dispatcherList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportDispatcherList(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: dispatcherList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "dispatcherList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportDispatcherList( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/partnersList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of partners")
    public Page<PartnersListResponse> executePartnersList(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: partnersList");
        Page<PartnersListResponse> _result = queryService.executePartnersList(pageable);
        LOGGER.debug("got the result for named query: partnersList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query partnersList")
    @RequestMapping(value = "/queries/partnersList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPartnersList(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: partnersList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "partnersList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportPartnersList( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/reviewersList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of reviewers")
    public Page<ReviewersListResponse> executeReviewersList(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: reviewersList");
        Page<ReviewersListResponse> _result = queryService.executeReviewersList(pageable);
        LOGGER.debug("got the result for named query: reviewersList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query reviewersList")
    @RequestMapping(value = "/queries/reviewersList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportReviewersList(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: reviewersList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "reviewersList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportReviewersList( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/insertWorkflowLog", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert row into workflow log")
    public IntegerWrapper executeInsertWorkflowLog(@Valid @RequestBody InsertWorkflowLogRequest insertWorkflowLogRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: insertWorkflowLog");
        Integer _result = queryService.executeInsertWorkflowLog(insertWorkflowLogRequest);
        LOGGER.debug("got the result for named query: insertWorkflowLog, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getProjectID", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get project ID")
    public Page<GetProjectIdResponse> executeGetProjectID(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getProjectID");
        Page<GetProjectIdResponse> _result = queryService.executeGetProjectID(pageable);
        LOGGER.debug("got the result for named query: getProjectID, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getProjectID")
    @RequestMapping(value = "/queries/getProjectID/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetProjectID(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getProjectID");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getProjectID";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetProjectID( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/clientsList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of Clients")
    public Page<ClientsListResponse> executeClientsList(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: clientsList");
        Page<ClientsListResponse> _result = queryService.executeClientsList(pageable);
        LOGGER.debug("got the result for named query: clientsList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query clientsList")
    @RequestMapping(value = "/queries/clientsList/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportClientsList(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: clientsList");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "clientsList";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportClientsList( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}