/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.tax_projects.cmtaxprojects.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.tax_projects.cmtaxprojects.Workflowlog;
import com.tax_projects.cmtaxprojects.WorkflowlogId;
import com.tax_projects.cmtaxprojects.service.WorkflowlogService;


/**
 * Controller object for domain model class Workflowlog.
 * @see Workflowlog
 */
@RestController("cmtaxprojects.WorkflowlogController")
@Api(value = "WorkflowlogController", description = "Exposes APIs to work with Workflowlog resource.")
@RequestMapping("/cmtaxprojects/Workflowlog")
public class WorkflowlogController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkflowlogController.class);

    @Autowired
	@Qualifier("cmtaxprojects.WorkflowlogService")
	private WorkflowlogService workflowlogService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Workflowlog instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Workflowlog createWorkflowlog(@RequestBody Workflowlog workflowlog) {
		LOGGER.debug("Create Workflowlog with information: {}" , workflowlog);

		workflowlog = workflowlogService.create(workflowlog);
		LOGGER.debug("Created Workflowlog with information: {}" , workflowlog);

	    return workflowlog;
	}

    @ApiOperation(value = "Returns the Workflowlog instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Workflowlog getWorkflowlog(@RequestParam("clientid") Integer clientid, @RequestParam("statusid") Integer statusid, @RequestParam("notifyid") Integer notifyid, @RequestParam("projectid") Integer projectid) {

        WorkflowlogId workflowlogId = new WorkflowlogId();
        workflowlogId.setClientid(clientid);
        workflowlogId.setStatusid(statusid);
        workflowlogId.setNotifyid(notifyid);
        workflowlogId.setProjectid(projectid);

        LOGGER.debug("Getting Workflowlog with id: {}" , workflowlogId);
        Workflowlog workflowlog = workflowlogService.getById(workflowlogId);
        LOGGER.debug("Workflowlog details with id: {}" , workflowlog);

        return workflowlog;
    }



    @ApiOperation(value = "Updates the Workflowlog instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Workflowlog editWorkflowlog(@RequestParam("clientid") Integer clientid, @RequestParam("statusid") Integer statusid, @RequestParam("notifyid") Integer notifyid, @RequestParam("projectid") Integer projectid, @RequestBody Workflowlog workflowlog) {

        workflowlog.setClientid(clientid);
        workflowlog.setStatusid(statusid);
        workflowlog.setNotifyid(notifyid);
        workflowlog.setProjectid(projectid);

        LOGGER.debug("Workflowlog details with id is updated with: {}" , workflowlog);

        return workflowlogService.update(workflowlog);
    }


    @ApiOperation(value = "Deletes the Workflowlog instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteWorkflowlog(@RequestParam("clientid") Integer clientid, @RequestParam("statusid") Integer statusid, @RequestParam("notifyid") Integer notifyid, @RequestParam("projectid") Integer projectid) {

        WorkflowlogId workflowlogId = new WorkflowlogId();
        workflowlogId.setClientid(clientid);
        workflowlogId.setStatusid(statusid);
        workflowlogId.setNotifyid(notifyid);
        workflowlogId.setProjectid(projectid);

        LOGGER.debug("Deleting Workflowlog with id: {}" , workflowlogId);
        Workflowlog workflowlog = workflowlogService.delete(workflowlogId);

        return workflowlog != null;
    }


    /**
     * @deprecated Use {@link #findWorkflowlogs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Workflowlog instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Workflowlog> searchWorkflowlogsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Workflowlogs list by query filter:{}", (Object) queryFilters);
        return workflowlogService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Workflowlog instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Workflowlog> findWorkflowlogs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Workflowlogs list by filter:", query);
        return workflowlogService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Workflowlog instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Workflowlog> filterWorkflowlogs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Workflowlogs list by filter", query);
        return workflowlogService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportWorkflowlogs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return workflowlogService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportWorkflowlogsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Workflowlog.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> workflowlogService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Workflowlog instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countWorkflowlogs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Workflowlogs");
		return workflowlogService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getWorkflowlogAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return workflowlogService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WorkflowlogService instance
	 */
	protected void setWorkflowlogService(WorkflowlogService service) {
		this.workflowlogService = service;
	}

}