/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.tax_projects.cmtaxprojects.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.tax_projects.cmtaxprojects.Projects;
import com.tax_projects.cmtaxprojects.Workflowlog;
import com.tax_projects.cmtaxprojects.Workstatus;
import com.tax_projects.cmtaxprojects.service.WorkstatusService;


/**
 * Controller object for domain model class Workstatus.
 * @see Workstatus
 */
@RestController("cmtaxprojects.WorkstatusController")
@Api(value = "WorkstatusController", description = "Exposes APIs to work with Workstatus resource.")
@RequestMapping("/cmtaxprojects/Workstatus")
public class WorkstatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkstatusController.class);

    @Autowired
	@Qualifier("cmtaxprojects.WorkstatusService")
	private WorkstatusService workstatusService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Workstatus instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Workstatus createWorkstatus(@RequestBody Workstatus workstatus) {
		LOGGER.debug("Create Workstatus with information: {}" , workstatus);

		workstatus = workstatusService.create(workstatus);
		LOGGER.debug("Created Workstatus with information: {}" , workstatus);

	    return workstatus;
	}

    @ApiOperation(value = "Returns the Workstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Workstatus getWorkstatus(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Workstatus with id: {}" , id);

        Workstatus foundWorkstatus = workstatusService.getById(id);
        LOGGER.debug("Workstatus details with id: {}" , foundWorkstatus);

        return foundWorkstatus;
    }

    @ApiOperation(value = "Updates the Workstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Workstatus editWorkstatus(@PathVariable("id") Integer id, @RequestBody Workstatus workstatus) {
        LOGGER.debug("Editing Workstatus with id: {}" , workstatus.getId());

        workstatus.setId(id);
        workstatus = workstatusService.update(workstatus);
        LOGGER.debug("Workstatus details with id: {}" , workstatus);

        return workstatus;
    }

    @ApiOperation(value = "Deletes the Workstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteWorkstatus(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Workstatus with id: {}" , id);

        Workstatus deletedWorkstatus = workstatusService.delete(id);

        return deletedWorkstatus != null;
    }

    /**
     * @deprecated Use {@link #findWorkstatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Workstatus instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Workstatus> searchWorkstatusesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Workstatuses list by query filter:{}", (Object) queryFilters);
        return workstatusService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Workstatus instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Workstatus> findWorkstatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Workstatuses list by filter:", query);
        return workstatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Workstatus instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Workstatus> filterWorkstatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Workstatuses list by filter", query);
        return workstatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportWorkstatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return workstatusService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportWorkstatusesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Workstatus.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> workstatusService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Workstatus instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countWorkstatuses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Workstatuses");
		return workstatusService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getWorkstatusAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return workstatusService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/projectses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the projectses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Projects> findAssociatedProjectses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated projectses");
        return workstatusService.findAssociatedProjectses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/workflowlogs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the workflowlogs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Workflowlog> findAssociatedWorkflowlogs(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated workflowlogs");
        return workstatusService.findAssociatedWorkflowlogs(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WorkstatusService instance
	 */
	protected void setWorkstatusService(WorkstatusService service) {
		this.workstatusService = service;
	}

}