/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.tax_projects.cmtaxprojects.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.export.ExportOptions;

import com.tax_projects.cmtaxprojects.models.query.*;

public interface CmtaxprojectsQueryExecutorService {

    Page<ProjectListResponse> executeProjectList(Pageable pageable);

    void exportProjectList(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<UsersListResponse> executeUsersList(Pageable pageable);

    void exportUsersList(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<DefaultdispatcherResponse> executeDefaultdispatcher(Pageable pageable);

    void exportDefaultdispatcher(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<TestResponse> executeTest(Pageable pageable);

    void exportTest(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<PartnersListResponse> executePartnersList(Pageable pageable);

    void exportPartnersList(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Integer executeInsertWorkflowLog(InsertWorkflowLogRequest insertWorkflowLogRequest);

    Page<GetProjectIdResponse> executeGetProjectID(Pageable pageable);

    void exportGetProjectID(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<DefaultreviewerResponse> executeDefaultreviewer(Pageable pageable);

    void exportDefaultreviewer(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<ClientsListResponse> executeClientsList(Pageable pageable);

    void exportClientsList(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<DefaultStatusResponse> executeDefaultStatus(Pageable pageable);

    void exportDefaultStatus(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<PreparersListResponse> executePreparersList(Pageable pageable);

    void exportPreparersList(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<GetCurrentDateResponse> executeGetCurrentDate(Pageable pageable);

    void exportGetCurrentDate(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<RolesListResponse> executeRolesList(Pageable pageable);

    void exportRolesList(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<StatusListResponse> executeStatusList(Pageable pageable);

    void exportStatusList(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<DuedateResponse> executeDuedate(Pageable pageable);

    void exportDuedate(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<UsformsResponse> executeUsforms(Pageable pageable);

    void exportUsforms(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<DispatcherListResponse> executeDispatcherList(Pageable pageable);

    void exportDispatcherList(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<ReviewersListResponse> executeReviewersList(Pageable pageable);

    void exportReviewersList(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<DateTodayResponse> executeDateToday(Pageable pageable);

    void exportDateToday(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

}