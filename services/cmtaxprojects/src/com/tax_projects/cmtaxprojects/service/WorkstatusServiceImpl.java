/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.tax_projects.cmtaxprojects.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.tax_projects.cmtaxprojects.Projects;
import com.tax_projects.cmtaxprojects.Workflowlog;
import com.tax_projects.cmtaxprojects.Workstatus;


/**
 * ServiceImpl object for domain model class Workstatus.
 *
 * @see Workstatus
 */
@Service("cmtaxprojects.WorkstatusService")
@Validated
public class WorkstatusServiceImpl implements WorkstatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkstatusServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("cmtaxprojects.ProjectsService")
    private ProjectsService projectsService;

    @Lazy
    @Autowired
    @Qualifier("cmtaxprojects.WorkflowlogService")
    private WorkflowlogService workflowlogService;

    @Autowired
    @Qualifier("cmtaxprojects.WorkstatusDao")
    private WMGenericDao<Workstatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Workstatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cmtaxprojectsTransactionManager")
    @Override
    public Workstatus create(Workstatus workstatus) {
        LOGGER.debug("Creating a new Workstatus with information: {}", workstatus);

        Workstatus workstatusCreated = this.wmGenericDao.create(workstatus);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(workstatusCreated);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Workstatus getById(Integer workstatusId) {
        LOGGER.debug("Finding Workstatus by id: {}", workstatusId);
        return this.wmGenericDao.findById(workstatusId);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Workstatus findById(Integer workstatusId) {
        LOGGER.debug("Finding Workstatus by id: {}", workstatusId);
        try {
            return this.wmGenericDao.findById(workstatusId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Workstatus found with id: {}", workstatusId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public List<Workstatus> findByMultipleIds(List<Integer> workstatusIds, boolean orderedReturn) {
        LOGGER.debug("Finding Workstatuses by ids: {}", workstatusIds);

        return this.wmGenericDao.findByMultipleIds(workstatusIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "cmtaxprojectsTransactionManager")
    @Override
    public Workstatus update(Workstatus workstatus) {
        LOGGER.debug("Updating Workstatus with information: {}", workstatus);

        this.wmGenericDao.update(workstatus);
        this.wmGenericDao.refresh(workstatus);

        return workstatus;
    }

    @Transactional(value = "cmtaxprojectsTransactionManager")
    @Override
    public Workstatus delete(Integer workstatusId) {
        LOGGER.debug("Deleting Workstatus with id: {}", workstatusId);
        Workstatus deleted = this.wmGenericDao.findById(workstatusId);
        if (deleted == null) {
            LOGGER.debug("No Workstatus found with id: {}", workstatusId);
            throw new EntityNotFoundException(String.valueOf(workstatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "cmtaxprojectsTransactionManager")
    @Override
    public void delete(Workstatus workstatus) {
        LOGGER.debug("Deleting Workstatus with {}", workstatus);
        this.wmGenericDao.delete(workstatus);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Workstatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Workstatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Workstatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Workstatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cmtaxprojects for table Workstatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service cmtaxprojects for table Workstatus to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Projects> findAssociatedProjectses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated projectses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("workstatus.id = '" + id + "'");

        return projectsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Workflowlog> findAssociatedWorkflowlogs(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated workflowlogs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("workstatus.id = '" + id + "'");

        return workflowlogService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ProjectsService instance
     */
    protected void setProjectsService(ProjectsService service) {
        this.projectsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service WorkflowlogService instance
     */
    protected void setWorkflowlogService(WorkflowlogService service) {
        this.workflowlogService = service;
    }

}