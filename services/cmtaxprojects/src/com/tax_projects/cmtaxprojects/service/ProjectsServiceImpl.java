/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.tax_projects.cmtaxprojects.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.tax_projects.cmtaxprojects.Projects;


/**
 * ServiceImpl object for domain model class Projects.
 *
 * @see Projects
 */
@Service("cmtaxprojects.ProjectsService")
@Validated
public class ProjectsServiceImpl implements ProjectsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProjectsServiceImpl.class);


    @Autowired
    @Qualifier("cmtaxprojects.ProjectsDao")
    private WMGenericDao<Projects, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Projects, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cmtaxprojectsTransactionManager")
    @Override
    public Projects create(Projects projects) {
        LOGGER.debug("Creating a new Projects with information: {}", projects);

        Projects projectsCreated = this.wmGenericDao.create(projects);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(projectsCreated);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Projects getById(Integer projectsId) {
        LOGGER.debug("Finding Projects by id: {}", projectsId);
        return this.wmGenericDao.findById(projectsId);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Projects findById(Integer projectsId) {
        LOGGER.debug("Finding Projects by id: {}", projectsId);
        try {
            return this.wmGenericDao.findById(projectsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Projects found with id: {}", projectsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public List<Projects> findByMultipleIds(List<Integer> projectsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Projects by ids: {}", projectsIds);

        return this.wmGenericDao.findByMultipleIds(projectsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "cmtaxprojectsTransactionManager")
    @Override
    public Projects update(Projects projects) {
        LOGGER.debug("Updating Projects with information: {}", projects);

        this.wmGenericDao.update(projects);
        this.wmGenericDao.refresh(projects);

        return projects;
    }

    @Transactional(value = "cmtaxprojectsTransactionManager")
    @Override
    public Projects delete(Integer projectsId) {
        LOGGER.debug("Deleting Projects with id: {}", projectsId);
        Projects deleted = this.wmGenericDao.findById(projectsId);
        if (deleted == null) {
            LOGGER.debug("No Projects found with id: {}", projectsId);
            throw new EntityNotFoundException(String.valueOf(projectsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "cmtaxprojectsTransactionManager")
    @Override
    public void delete(Projects projects) {
        LOGGER.debug("Deleting Projects with {}", projects);
        this.wmGenericDao.delete(projects);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Projects> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Projects");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Projects> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Projects");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cmtaxprojects for table Projects to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service cmtaxprojects for table Projects to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}