/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.tax_projects.cmtaxprojects.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.tax_projects.cmtaxprojects.Workflowlog;
import com.tax_projects.cmtaxprojects.WorkflowlogId;


/**
 * ServiceImpl object for domain model class Workflowlog.
 *
 * @see Workflowlog
 */
@Service("cmtaxprojects.WorkflowlogService")
@Validated
public class WorkflowlogServiceImpl implements WorkflowlogService {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkflowlogServiceImpl.class);


    @Autowired
    @Qualifier("cmtaxprojects.WorkflowlogDao")
    private WMGenericDao<Workflowlog, WorkflowlogId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Workflowlog, WorkflowlogId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cmtaxprojectsTransactionManager")
    @Override
    public Workflowlog create(Workflowlog workflowlog) {
        LOGGER.debug("Creating a new Workflowlog with information: {}", workflowlog);

        Workflowlog workflowlogCreated = this.wmGenericDao.create(workflowlog);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(workflowlogCreated);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Workflowlog getById(WorkflowlogId workflowlogId) {
        LOGGER.debug("Finding Workflowlog by id: {}", workflowlogId);
        return this.wmGenericDao.findById(workflowlogId);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Workflowlog findById(WorkflowlogId workflowlogId) {
        LOGGER.debug("Finding Workflowlog by id: {}", workflowlogId);
        try {
            return this.wmGenericDao.findById(workflowlogId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Workflowlog found with id: {}", workflowlogId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public List<Workflowlog> findByMultipleIds(List<WorkflowlogId> workflowlogIds, boolean orderedReturn) {
        LOGGER.debug("Finding Workflowlogs by ids: {}", workflowlogIds);

        return this.wmGenericDao.findByMultipleIds(workflowlogIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "cmtaxprojectsTransactionManager")
    @Override
    public Workflowlog update(Workflowlog workflowlog) {
        LOGGER.debug("Updating Workflowlog with information: {}", workflowlog);

        this.wmGenericDao.update(workflowlog);
        this.wmGenericDao.refresh(workflowlog);

        return workflowlog;
    }

    @Transactional(value = "cmtaxprojectsTransactionManager")
    @Override
    public Workflowlog delete(WorkflowlogId workflowlogId) {
        LOGGER.debug("Deleting Workflowlog with id: {}", workflowlogId);
        Workflowlog deleted = this.wmGenericDao.findById(workflowlogId);
        if (deleted == null) {
            LOGGER.debug("No Workflowlog found with id: {}", workflowlogId);
            throw new EntityNotFoundException(String.valueOf(workflowlogId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "cmtaxprojectsTransactionManager")
    @Override
    public void delete(Workflowlog workflowlog) {
        LOGGER.debug("Deleting Workflowlog with {}", workflowlog);
        this.wmGenericDao.delete(workflowlog);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Workflowlog> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Workflowlogs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Workflowlog> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Workflowlogs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cmtaxprojects for table Workflowlog to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service cmtaxprojects for table Workflowlog to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}