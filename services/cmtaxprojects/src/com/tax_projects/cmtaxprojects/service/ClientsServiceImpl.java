/*Copyright (c) 2018-2019 rubaya.io All Rights Reserved.
 This software is the confidential and proprietary information of rubaya.io You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with rubaya.io*/
package com.tax_projects.cmtaxprojects.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.tax_projects.cmtaxprojects.Clients;
import com.tax_projects.cmtaxprojects.Projects;
import com.tax_projects.cmtaxprojects.Workflowlog;


/**
 * ServiceImpl object for domain model class Clients.
 *
 * @see Clients
 */
@Service("cmtaxprojects.ClientsService")
@Validated
public class ClientsServiceImpl implements ClientsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ClientsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("cmtaxprojects.ProjectsService")
    private ProjectsService projectsService;

    @Lazy
    @Autowired
    @Qualifier("cmtaxprojects.WorkflowlogService")
    private WorkflowlogService workflowlogService;

    @Autowired
    @Qualifier("cmtaxprojects.ClientsDao")
    private WMGenericDao<Clients, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Clients, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cmtaxprojectsTransactionManager")
    @Override
    public Clients create(Clients clients) {
        LOGGER.debug("Creating a new Clients with information: {}", clients);

        Clients clientsCreated = this.wmGenericDao.create(clients);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(clientsCreated);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Clients getById(Integer clientsId) {
        LOGGER.debug("Finding Clients by id: {}", clientsId);
        return this.wmGenericDao.findById(clientsId);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Clients findById(Integer clientsId) {
        LOGGER.debug("Finding Clients by id: {}", clientsId);
        try {
            return this.wmGenericDao.findById(clientsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Clients found with id: {}", clientsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public List<Clients> findByMultipleIds(List<Integer> clientsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Clients by ids: {}", clientsIds);

        return this.wmGenericDao.findByMultipleIds(clientsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "cmtaxprojectsTransactionManager")
    @Override
    public Clients update(Clients clients) {
        LOGGER.debug("Updating Clients with information: {}", clients);

        this.wmGenericDao.update(clients);
        this.wmGenericDao.refresh(clients);

        return clients;
    }

    @Transactional(value = "cmtaxprojectsTransactionManager")
    @Override
    public Clients delete(Integer clientsId) {
        LOGGER.debug("Deleting Clients with id: {}", clientsId);
        Clients deleted = this.wmGenericDao.findById(clientsId);
        if (deleted == null) {
            LOGGER.debug("No Clients found with id: {}", clientsId);
            throw new EntityNotFoundException(String.valueOf(clientsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "cmtaxprojectsTransactionManager")
    @Override
    public void delete(Clients clients) {
        LOGGER.debug("Deleting Clients with {}", clients);
        this.wmGenericDao.delete(clients);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Clients> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Clients");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Clients> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Clients");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cmtaxprojects for table Clients to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service cmtaxprojects for table Clients to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Projects> findAssociatedProjectses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated projectses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("clients.id = '" + id + "'");

        return projectsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cmtaxprojectsTransactionManager")
    @Override
    public Page<Workflowlog> findAssociatedWorkflowlogs(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated workflowlogs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("clients.id = '" + id + "'");

        return workflowlogService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ProjectsService instance
     */
    protected void setProjectsService(ProjectsService service) {
        this.projectsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service WorkflowlogService instance
     */
    protected void setWorkflowlogService(WorkflowlogService service) {
        this.workflowlogService = service;
    }

}